#iChannel0 "file://./pics/filter/ware_house.jpg"
#iChannel1 "file://./pics/filter/wo_niu.jpg"
#iChannel2 "self"

const float PI = 3.1415926;

//一维高斯模糊

vec4 GetGuassionBlur1(vec2 uv,vec2 blurDir,float sigma,float norm, int support)
{
    vec4 res = texture(iChannel1,uv);
    for(int i = 1;i <= support;i++)
    {
        float fCoaff = exp(-0.5 * float(i) * float(i)/(sigma * sigma));
        vec2 diff = float(i) * blurDir / iResolution.xy;
        res += texture(iChannel1,uv - diff) * fCoaff;
        res += texture(iChannel1,uv + diff) * fCoaff;
    }
    res = res * norm;
    return res;
}

//多项式向前查分法优化
// Adapted: http://callumhay.blogspot.com/2010/09/gaussian-blur-shader-glsl.html
vec4 GaussianBlur2(vec2 uv,vec2 blurDir, float sigma, int blurKernelHalfSize,float blurRadius)
{
    vec3 gaussCoeff;
    gaussCoeff.x = 1.0 / (sqrt(2.0 * PI) * sigma);
    gaussCoeff.y = exp(-0.5 / (sigma * sigma));
    gaussCoeff.z = gaussCoeff.y * gaussCoeff.y;

    vec2 blurVec = blurRadius * blurDir; 
    float gaussCoeffNum = 0.0;
    vec4 colorRes = texture(iChannel1,uv) * gaussCoeff.x;
    gaussCoeffNum += gaussCoeff.x;
    gaussCoeff.xy *= gaussCoeff.yz;

    for(int i = 1;i <= blurKernelHalfSize;i++)
    {
        vec2 diff = float(i) * blurVec  / iResolution.xy;
        colorRes += texture(iChannel1,uv - diff) * gaussCoeff.x;
        colorRes += texture(iChannel1,uv + diff) * gaussCoeff.x;
        gaussCoeffNum += 2.0 * gaussCoeff.x;
        gaussCoeff.xy *= gaussCoeff.yz;
    }

    colorRes = colorRes / gaussCoeffNum;
    return colorRes;
}

void main()
{
    //将纹理坐标转化到[0,1]区间
    vec2 uv = gl_FragCoord.xy / iResolution.xy;
    vec2 blurDir = vec2(1.0,0.0);
    float sigma = 1.0;
    int support = int(sigma * 3.0);

    /*
    float norm = 1.0 / (sqrt(2.0 * PI) * sigma);
    vec4 vGuassianColor = GetGuassionBlur1(uv,blurDir,sigma,norm,support);
    gl_FragColor = vGuassianColor;
    */
    float blurRadius = 2.0;
    gl_FragColor = GaussianBlur2(uv,blurDir,sigma,support,blurRadius);
}